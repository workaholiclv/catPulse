import os
import threading
import time
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
)
from crypto import (
    get_top_coins,
    get_analysis,
    calculate_profit,
    get_strategy,
    get_news,
    add_alert,
    remove_alert,
    check_alerts,
    load_alerts,
    save_alerts,
    get_current_price,
)

# üåç IelƒÅdƒì .env failu
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("Nav iestatƒ´ts TELEGRAM_BOT_TOKEN .env failƒÅ")


def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "üëã Sveiki! Esmu kripto-kaƒ∑isüêæ, kas palƒ´dzƒìs tev ar monƒìtu ü™ô analƒ´zi.\n\n"
        "üìå *PieejamƒÅs komandas:*\n"
        "üìà /analyze ‚Äì analƒ´ze par monƒìtƒÅm vai top trendiem, ja nav norƒÅdƒ´ts\n"
        "üí∞ /profit ‚Äì ieteikumi LONG/SHORT, vai top trendi, ja nav norƒÅdƒ´ts\n"
        "üìà /strategy ‚Äì investƒ´ciju stratƒìƒ£ijas, jƒÅnorƒÅda monƒìtas (piem. BTC,ETH)\n"
        "üîî /alerts BTC > BTC - iestata cenu, pie kuras sa≈Üemt pazi≈Üojumu (piem., /alerts BTC 65000)\n"
        "üÜï /setalert BTC 70000 - Jauns brƒ´dinƒÅjums\n"
        "‚ùå /removealert BTC 70000 - Dzƒìst brƒ´dinƒÅjumu \n"
        "üì∞ /news BTC - rƒÅda jaunƒÅkƒÅs zi≈Üas par monƒìtu (piem., /news BTC)\n"
        "‚ùì /help ‚Äì palƒ´dzƒ´ba",
        parse_mode='Markdown'
    )


def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "üìå *PieejamƒÅs komandas:*\n"
        "üìà /analyze ‚Äì analƒ´ze par monƒìtƒÅm vai top trendiem, ja nav norƒÅdƒ´ts\n"
        "üí∞ /profit ‚Äì ieteikumi LONG/SHORT, vai top trendi, ja nav norƒÅdƒ´ts\n"
        "üìà /strategy ‚Äì investƒ´ciju stratƒìƒ£ijas, jƒÅnorƒÅda monƒìtas (piem. BTC,ETH)\n"
        "üîî /alerts BTC > BTC - iestata cenu, pie kuras sa≈Üemt pazi≈Üojumu (piem., /alerts BTC 65000)\n"
        "üÜï /setalert BTC 70000 - Jauns brƒ´dinƒÅjums\n"
        "‚ùå /removealert BTC 70000 - Dzƒìst brƒ´dinƒÅjumu \n"
        "üì∞ /news BTC - rƒÅda jaunƒÅkƒÅs zi≈Üas par monƒìtu (piem., /news BTC)\n"
        "‚ùì /help ‚Äì palƒ´dzƒ´ba",
        parse_mode='Markdown'
    )


def analyze(update: Update, context: CallbackContext) -> None:
    coins = context.args
    if not coins:
        coins = get_top_coins(10)
    text = get_analysis(coins)
    update.message.reply_text(text)


def profit(update: Update, context: CallbackContext) -> None:
    coins = context.args
    if not coins:
        coins = get_top_coins(10)
    text = calculate_profit(coins)
    update.message.reply_text(text)


def strategy(update: Update, context: CallbackContext) -> None:
    coins = context.args
    if not coins:
        update.message.reply_text(
            "L≈´dzu, norƒÅdi vismaz vienu monƒìtu pƒìc komandas, piem., /strategy BTC ETH"
        )
        return
    text = get_strategy(coins)
    update.message.reply_text(text)


def news(update: Update, context: CallbackContext) -> None:
    coins = context.args
    if not coins:
        update.message.reply_text("L≈´dzu, norƒÅdi monƒìtu pƒìc komandas, piem., /news BTC")
        return
    text = get_news(coins[0])
    update.message.reply_text(text)


def setalert_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    args = context.args
    if len(args) < 2:
        update.message.reply_text(
            "L≈´dzu, izmanto: /setalert COIN PRICE (piem., /setalert BTC 50000)"
        )
        return
    coin = args[0].upper()
    try:
        price = float(args[1])
    except ValueError:
        update.message.reply_text("L≈´dzu, ievadi derƒ´gu cenu, piemƒìram, 50000")
        return

    alerts = context.bot_data.get("alerts", {})
    add_alert(alerts, user_id, coin, price)
    context.bot_data["alerts"] = alerts
    save_alerts(alerts)

    update.message.reply_text(f"‚úÖ Brƒ´dinƒÅjums iestatƒ´ts: {coin} pie {price} USD")


def removealert_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    args = context.args
    if len(args) < 2:
        update.message.reply_text(
            "L≈´dzu, izmanto: /removealert COIN PRICE (piem., /removealert BTC 50000)"
        )
        return
    coin = args[0].upper()
    try:
        price = float(args[1])
    except ValueError:
        update.message.reply_text("L≈´dzu, ievadi derƒ´gu cenu.")
        return

    alerts = context.bot_data.get("alerts", {})
    removed = remove_alert(alerts, user_id, coin, price)
    if removed:
        context.bot_data["alerts"] = alerts
        save_alerts(alerts)
        update.message.reply_text(f"‚úÖ Brƒ´dinƒÅjums par {coin} pie {price} USD no≈Üemts.")
    else:
        update.message.reply_text("‚ö†Ô∏è ≈†ƒÅds brƒ´dinƒÅjums netika atrasts.")


def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f"AtjauninƒÅjums {update} izraisƒ´ja kƒº≈´du: {context.error}")


def alert_checker_thread(bot):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Å –∑–∞—â–∏—Ç–æ–π."""
    while True:
        try:
            check_alerts(bot)
        except Exception as e:
            logger.error(f"Kƒº≈´da alertu pƒÅrbaudƒì: {e}")
        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –ó–∞–≥—Ä—É–∂–∞–µ–º alert'—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    alerts = load_alerts()
    if alerts is None:
        alerts = {}
    dispatcher.bot_data["alerts"] = alerts

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("analyze", analyze))
    dispatcher.add_handler(CommandHandler("profit", profit))
    dispatcher.add_handler(CommandHandler("strategy", strategy))
    dispatcher.add_handler(CommandHandler("news", news))
    dispatcher.add_handler(CommandHandler("setalert", setalert_command))
    dispatcher.add_handler(CommandHandler("removealert", removealert_command))

    dispatcher.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É alert'–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=alert_checker_thread, args=(updater.bot,), daemon=True)
    thread.start()

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
